{"version":3,"file":"index.js","mappings":";AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://TechCore-GH-Action/webpack/runtime/compat","../webpack://TechCore-GH-Action/./lib/index.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = __importDefault(require(\"@actions/core\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nfunction main() {\n    return __awaiter(this, void 0, void 0, function* () {\n        core_1.default.info(\"TechCore build action initiated.\");\n        const buildId = core_1.default.getInput(\"techcore-build-id\");\n        const techCoreToken = core_1.default.getInput(\"techcore-api-key\");\n        console.log(`your buildId: ${buildId}`);\n        console.log(`your techCoreToken: ${techCoreToken}`);\n        const response = yield axios_1.default.get(\"https://04c6-216-106-133-65.ngrok.io\", {\n            responseType: \"stream\",\n        });\n        const stream = response.data;\n        stream.on(\"data\", (data) => {\n            const parsedData = Buffer.from(data).toString(\"utf-8\");\n            console.log(parsedData);\n        });\n        stream.on(\"end\", () => {\n            console.log(\"stream done\");\n        });\n    });\n}\nmain();\n"],"names":[],"sourceRoot":""}